#!/bin/bash

# Climate Economy Assistant - Docker Development Setup Script
# This script sets up the development environment with proper health checks
# Following the 23 coding rules for scalable, efficient development
# Updated with LangGraph Studio integration

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
COMPOSE_FILE="docker-compose.yaml"
PROD_COMPOSE_FILE="docker-compose.prod.yaml"
ENV_FILE=".env"
ENV_EXAMPLE=".env.example"

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}========================================${NC}"
    echo -e "${BLUE} $1${NC}"
    echo -e "${BLUE}========================================${NC}"
}

# Check prerequisites
check_prerequisites() {
    print_header "Checking Prerequisites"
    
    # Check if Docker is installed
    if ! command -v docker &> /dev/null; then
        print_error "Docker is not installed. Please install Docker first."
        exit 1
    fi
    print_status "Docker is installed"
    
    # Check if Docker Compose is installed
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        print_error "Docker Compose is not installed. Please install Docker Compose first."
        exit 1
    fi
    print_status "Docker Compose is installed"
    
    # Check if Docker daemon is running
    if ! docker info &> /dev/null; then
        print_error "Docker daemon is not running. Please start Docker first."
        exit 1
    fi
    print_status "Docker daemon is running"
    
    # Check if Python is available for LangGraph CLI
    if command -v python3 &> /dev/null; then
        print_status "Python 3 is available for LangGraph CLI"
    else
        print_warning "Python 3 not found. LangGraph CLI features may be limited."
    fi
}

# Setup LangGraph CLI
setup_langgraph_cli() {
    print_header "Setting Up LangGraph CLI"
    
    if command -v python3 &> /dev/null; then
        if ! command -v langgraph &> /dev/null; then
            print_status "Installing LangGraph CLI..."
            python3 -m pip install -U "langgraph-cli[inmem]" || {
                print_warning "Failed to install LangGraph CLI globally. You can install it later with: pip install 'langgraph-cli[inmem]'"
            }
        else
            print_status "LangGraph CLI is already installed"
        fi
    fi
}

# Setup environment file
setup_env() {
    print_header "Setting Up Environment"
    
    if [ ! -f "$ENV_FILE" ]; then
        if [ -f "$ENV_EXAMPLE" ]; then
            cp "$ENV_EXAMPLE" "$ENV_FILE"
            print_status "Created $ENV_FILE from $ENV_EXAMPLE"
        else
            print_warning "No .env.example found. Creating basic .env file..."
            cat > "$ENV_FILE" << EOL
# Climate Economy Assistant Environment Variables
# Generated by setup script

# Supabase Configuration
SUPABASE_URL=your_supabase_url_here
SUPABASE_ANON_KEY=your_supabase_anon_key_here
SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_key_here

# OpenAI Configuration
OPENAI_API_KEY=your_openai_api_key_here

# Groq Configuration (Optional)
GROQ_API_KEY=your_groq_api_key_here

# LangSmith Configuration (for LangGraph Studio)
LANGSMITH_API_KEY=lsv2_your_langsmith_api_key_here
LANGSMITH_TRACING=true
LANGSMITH_PROJECT=climate-economy-assistant

# Redis Configuration
REDIS_URL=redis://redis:6379

# Application Configuration
ENVIRONMENT=development
LOG_LEVEL=INFO
NODE_ENV=development

# Security (Generate secure keys for production)
JWT_SECRET=your_jwt_secret_here
ENCRYPTION_KEY=your_encryption_key_here

# Port Configuration
API_PORT=8000
FRONTEND_PORT=3000
LANGGRAPH_PORT=2024
EOL
            print_status "Created basic $ENV_FILE"
        fi
    else
        print_status "Environment file already exists"
        
        # Add LangGraph configuration if missing
        if ! grep -q "LANGSMITH_API_KEY" "$ENV_FILE"; then
            print_status "Adding LangGraph Studio configuration to .env..."
            cat >> "$ENV_FILE" << EOL

# LangSmith Configuration (for LangGraph Studio)
LANGSMITH_API_KEY=lsv2_your_langsmith_api_key_here
LANGSMITH_TRACING=true
LANGSMITH_PROJECT=climate-economy-assistant
LANGGRAPH_PORT=2024
EOL
        fi
    fi
}

# Build and start services
start_development() {
    print_header "Starting Development Environment"
    
    # Build images
    print_status "Building Docker images..."
    docker compose --profile dev build
    
    # Start services
    print_status "Starting services..."
    docker compose --profile dev up -d
    
    # Wait for services to be ready
    wait_for_services
    
    print_status "Development environment is ready!"
    print_status "Frontend: http://localhost:3000"
    print_status "Backend API: http://localhost:8000"
    print_status "Redis: localhost:6379"
    
    # Check if LangGraph CLI is available
    if command -v langgraph &> /dev/null; then
        print_status "LangGraph CLI is available. You can start LangGraph Studio with:"
        print_status "  cd backend && langgraph dev"
        print_status "  LangGraph Studio: https://smith.langchain.com/studio/?baseUrl=http://127.0.0.1:2024"
    fi
}

# Start LangGraph Studio
start_langgraph_studio() {
    print_header "Starting LangGraph Studio"
    
    if ! command -v langgraph &> /dev/null; then
        print_error "LangGraph CLI is not installed. Installing now..."
        setup_langgraph_cli
    fi
    
    if ! command -v langgraph &> /dev/null; then
        print_error "Could not install LangGraph CLI. Please install manually with:"
        print_error "  pip install 'langgraph-cli[inmem]'"
        return 1
    fi
    
    # Check if backend directory exists
    if [ ! -d "backend" ]; then
        print_error "Backend directory not found. Make sure you're in the project root."
        return 1
    fi
    
    # Check if langgraph.json exists
    if [ ! -f "backend/langgraph.json" ]; then
        print_error "LangGraph configuration file not found at backend/langgraph.json"
        print_error "Please ensure the file exists and contains proper configuration."
        return 1
    fi
    
    print_status "Starting LangGraph development server..."
    print_status "This will open LangGraph Studio in your browser automatically."
    print_status "Studio URL: https://smith.langchain.com/studio/?baseUrl=http://127.0.0.1:2024"
    
    cd backend
    langgraph dev --port 2024 --host 0.0.0.0
}

# Start LangGraph Studio with debugging
start_langgraph_debug() {
    print_header "Starting LangGraph Studio with Debugging"
    
    if ! command -v langgraph &> /dev/null; then
        print_error "LangGraph CLI is not installed. Please install with:"
        print_error "  pip install 'langgraph-cli[inmem]'"
        return 1
    fi
    
    print_status "Starting LangGraph with debugging enabled..."
    print_status "Debug port: 5678"
    print_status "Attach your debugger to localhost:5678"
    
    cd backend
    langgraph dev --debug-port 5678 --wait-for-client --port 2024 --host 0.0.0.0
}

# Wait for services to be healthy
wait_for_services() {
    print_header "Waiting for Services to be Ready"
    
    # Wait for backend
    print_status "Waiting for backend API..."
    for i in {1..30}; do
        if curl -f http://localhost:8000/ &> /dev/null || curl -f http://localhost:8000/api/v1/health &> /dev/null; then
            print_status "Backend API is ready"
            break
        fi
        if [ $i -eq 30 ]; then
            print_error "Backend API failed to start"
            docker compose logs api
            exit 1
        fi
        sleep 2
    done
    
    # Wait for frontend
    print_status "Waiting for frontend..."
    for i in {1..30}; do
        if curl -f http://localhost:3000/ &> /dev/null; then
            print_status "Frontend is ready"
            break
        fi
        if [ $i -eq 30 ]; then
            print_warning "Frontend might not be ready yet, but continuing..."
        fi
        sleep 2
    done
    
    # Check Redis
    print_status "Checking Redis..."
    if docker compose exec redis redis-cli ping &> /dev/null; then
        print_status "Redis is ready"
    else
        print_warning "Redis might not be ready yet"
    fi
}

# Stop services
stop_services() {
    print_header "Stopping Services"
    docker compose --profile dev down
    print_status "Services stopped"
}

# Show logs
show_logs() {
    print_header "Service Logs"
    docker compose logs -f
}

# Clean up
cleanup() {
    print_header "Cleaning Up"
    docker compose down -v
    docker system prune -f
    print_status "Cleanup completed"
}

# Production setup
setup_production() {
    print_header "Setting Up Production Environment"
    
    # Create data directories
    mkdir -p data/redis data/prometheus data/grafana
    
    # Build and start production services
    docker compose -f "$COMPOSE_FILE" -f "$PROD_COMPOSE_FILE" --profile prod build
    docker compose -f "$COMPOSE_FILE" -f "$PROD_COMPOSE_FILE" --profile prod up -d
    
    print_status "Production environment is ready!"
}

# Test LangGraph configuration
test_langgraph() {
    print_header "Testing LangGraph Configuration"
    
    if [ ! -f "backend/langgraph.json" ]; then
        print_error "LangGraph configuration file not found at backend/langgraph.json"
        return 1
    fi
    
    print_status "Validating langgraph.json..."
    
    # Check if the JSON is valid
    if python3 -m json.tool backend/langgraph.json > /dev/null 2>&1; then
        print_status "✅ LangGraph configuration is valid JSON"
    else
        print_error "❌ LangGraph configuration has invalid JSON syntax"
        return 1
    fi
    
    # Check if required fields exist
    if grep -q '"graphs"' backend/langgraph.json; then
        print_status "✅ Graphs configuration found"
    else
        print_error "❌ Missing 'graphs' configuration"
    fi
    
    if grep -q '"dependencies"' backend/langgraph.json; then
        print_status "✅ Dependencies configuration found"
    else
        print_error "❌ Missing 'dependencies' configuration"
    fi
    
    print_status "LangGraph configuration test completed"
}

# Main menu
show_menu() {
    echo
    print_header "Climate Economy Assistant - Docker Management"
    echo "1. Start Development Environment"
    echo "2. Stop Services"
    echo "3. Show Logs"
    echo "4. Setup Production"
    echo "5. Cleanup (Remove all containers and volumes)"
    echo "6. Start LangGraph Studio"
    echo "7. Start LangGraph Studio with Debugging"
    echo "8. Test LangGraph Configuration"
    echo "9. Setup LangGraph CLI"
    echo "10. Exit"
    echo
}

# Main script logic
main() {
    check_prerequisites
    setup_env
    
    if [ $# -eq 0 ]; then
        while true; do
            show_menu
            read -p "Please select an option (1-10): " choice
            
            case $choice in
                1)
                    start_development
                    break
                    ;;
                2)
                    stop_services
                    ;;
                3)
                    show_logs
                    ;;
                4)
                    setup_production
                    break
                    ;;
                5)
                    cleanup
                    ;;
                6)
                    start_langgraph_studio
                    ;;
                7)
                    start_langgraph_debug
                    ;;
                8)
                    test_langgraph
                    ;;
                9)
                    setup_langgraph_cli
                    ;;
                10)
                    print_status "Goodbye!"
                    exit 0
                    ;;
                *)
                    print_error "Invalid option. Please select 1-10."
                    ;;
            esac
        done
    else
        case $1 in
            "start"|"dev")
                start_development
                ;;
            "stop")
                stop_services
                ;;
            "logs")
                show_logs
                ;;
            "prod"|"production")
                setup_production
                ;;
            "clean"|"cleanup")
                cleanup
                ;;
            "studio"|"langgraph")
                start_langgraph_studio
                ;;
            "debug")
                start_langgraph_debug
                ;;
            "test-langgraph")
                test_langgraph
                ;;
            "setup-langgraph")
                setup_langgraph_cli
                ;;
            *)
                print_error "Unknown command: $1"
                echo "Usage: $0 [start|stop|logs|prod|clean|studio|debug|test-langgraph|setup-langgraph]"
                exit 1
                ;;
        esac
    fi
}

# Run main function
main "$@" 