# Production Docker Compose Override
# Climate Economy Assistant - Production Configuration
# Usage: docker compose -f docker-compose.yaml -f docker-compose.prod.yaml --profile prod up

version: '3.8'

services:
  # =====================================================
  # Production API Service
  # =====================================================
  api:
    restart: always
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=WARNING
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =====================================================
  # Production Frontend Service
  # =====================================================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - NODE_ENV=production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8001
    restart: unless-stopped
    depends_on:
      - backend

  # =====================================================
  # Production Redis Service
  # =====================================================
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # =====================================================
  # Production Monitoring (Optional)
  # =====================================================
  prometheus:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  grafana:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

# =====================================================
# Production Volumes with Backup Support
# =====================================================
volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana

# =====================================================
# Backend Service
# =====================================================
backend:
  build:
    context: .
    dockerfile: Dockerfile
    args:
      - ENVIRONMENT=production
  ports:
    - "8001:8001"
  volumes:
    - backend_data:/app/data
  environment:
    - PYTHONPATH=/app
    - ENVIRONMENT=production
    - OPENAI_API_KEY=${OPENAI_API_KEY}
    - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
  restart: unless-stopped
  depends_on:
    - redis
    - langgraph-server

# =====================================================
# LangGraph Server
# =====================================================
langgraph-server:
  build:
    context: .
    dockerfile: Dockerfile.langgraph
  ports:
    - "8123:8123"
  volumes:
    - ./backendv1:/app/backendv1
    - ./langgraph.json:/app/langgraph.json
  environment:
    - PYTHONPATH=/app
    - OPENAI_API_KEY=${OPENAI_API_KEY}
    - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
  restart: unless-stopped
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:8123/health"]
    interval: 10s
    timeout: 5s
    retries: 3 