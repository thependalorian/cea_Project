# Climate Economy Assistant - Enhanced Docker Compose Configuration
# Supports development, production, GPU, and supervisor workflow environments
# Usage: docker compose --profile dev up (or --profile prod, --profile gpu, --profile supervisor)
# Updated for Next.js 14.0.4, TypeScript, Redis integration, Supervisor Workflow, and Enhanced Intelligence

version: '3.8'

services:
  # =====================================================
  # Enhanced FastAPI Backend with Supervisor Workflow
  # =====================================================
  api:
    build: 
      context: .
      dockerfile: Dockerfile
    profiles: ["dev", "prod"]
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      # Supabase Configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      
      # OpenAI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o}
      
      # Groq Configuration (Alternative LLM)
      - GROQ_API_KEY=${GROQ_API_KEY}
      
      # Redis Configuration
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      
      # Optional Local LLM Support
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://ollama:11434}
      - USE_LOCAL_LLM=${USE_LOCAL_LLM:-false}
      
      # Enhanced Environment Configuration
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://frontend:3000}
      - STARTUP_MODE=${STARTUP_MODE:-api}
      - WORKERS=${API_WORKERS:-4}
      
      # Security
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      
      # LangGraph and Enhanced Intelligence
      - LANGCHAIN_TRACING_V2=${LANGCHAIN_TRACING_V2:-false}
      - LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT:-climate-economy-assistant}
      - LANGGRAPH_CONFIG_PATH=/app/langgraph.json
      
      # Python Configuration
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    depends_on:
      - redis
    volumes:
      - ./logs:/app/logs
      - ./backend/langgraph.json:/app/langgraph.json
    restart: unless-stopped
    develop:
      watch:
        - action: rebuild
          path: ./backend
          target: /app
          ignore:
            - __pycache__/
            - "*.pyc"
            - logs/
            - "*.log"
            - .langgraph_api/
    networks:
      - cea-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # =====================================================
  # Supervisor Workflow Service (Enhanced Backend)
  # =====================================================
  supervisor:
    build: 
      context: .
      dockerfile: Dockerfile
    profiles: ["supervisor", "dev-supervisor"]
    ports:
      - "${API_PORT:-8000}:8000"
      - "${LANGGRAPH_PORT:-8123}:8123"
    environment:
      # Same environment as API but with supervisor mode
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://ollama:11434}
      - USE_LOCAL_LLM=${USE_LOCAL_LLM:-false}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://frontend:3000}
      
      # Supervisor Workflow Specific Configuration
      - STARTUP_MODE=supervisor
      - WORKERS=1  # Single worker for supervisor mode
      
      # Security
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      
      # Enhanced Intelligence Framework
      - LANGCHAIN_TRACING_V2=${LANGCHAIN_TRACING_V2:-false}
      - LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT:-climate-economy-assistant-supervisor}
      - LANGGRAPH_CONFIG_PATH=/app/langgraph.json
      - LANGGRAPH_API_PORT=8123
      - LANGGRAPH_API_HOST=0.0.0.0
      
      # Python Configuration
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    depends_on:
      - redis
    volumes:
      - ./logs:/app/logs
      - ./backend/langgraph.json:/app/langgraph.json
    restart: unless-stopped
    command: ["supervisor"]
    networks:
      - cea-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health", "||", "curl", "-f", "http://localhost:8123/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # =====================================================
  # GPU-Enhanced Supervisor Workflow
  # =====================================================
  supervisor-gpu:
    build: 
      context: .
      dockerfile: Dockerfile
    profiles: ["gpu", "supervisor-gpu"]
    ports:
      - "${API_PORT:-8000}:8000"
      - "${LANGGRAPH_PORT:-8123}:8123"
    environment:
      # GPU-optimized supervisor configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - REDIS_URL=redis://redis:6379
      - OLLAMA_BASE_URL=http://ollama-gpu:11434
      - USE_LOCAL_LLM=true
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - STARTUP_MODE=supervisor
      - WORKERS=1
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - LANGCHAIN_TRACING_V2=${LANGCHAIN_TRACING_V2:-false}
      - LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT:-climate-economy-assistant-gpu}
      - LANGGRAPH_CONFIG_PATH=/app/langgraph.json
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    depends_on:
      - ollama-gpu
      - redis
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    volumes:
      - ./logs:/app/logs
      - ./backend/langgraph.json:/app/langgraph.json
    restart: unless-stopped
    command: ["supervisor"]
    networks:
      - cea-network

  # =====================================================
  # Enhanced Next.js Frontend Service with Supervisor Integration
  # =====================================================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - backend

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./backend:/app/backend
      - ./backendv1:/app/backendv1
      - ./scripts:/app/scripts
      - ./docs:/app/docs
      - backend_data:/app/data
    environment:
      - PYTHONPATH=/app
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    depends_on:
      - redis
      - langgraph-server

  # =====================================================
  # Supervisor Frontend (Dedicated for Supervisor Workflow)
  # =====================================================
  frontend-supervisor:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: ${DOCKER_TARGET:-development}
    profiles: ["supervisor"]
    ports:
      - "${FRONTEND_SUPERVISOR_PORT:-3001}:3000"
    environment:
      # Supabase Configuration
      - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      
      # API Configuration - Supervisor Optimized
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - API_URL=${API_URL:-http://supervisor:8000}
      - NEXT_PUBLIC_SUPERVISOR_API_URL=${NEXT_PUBLIC_SUPERVISOR_API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_LANGGRAPH_API_URL=${NEXT_PUBLIC_LANGGRAPH_API_URL:-http://localhost:8123}
      
      # Redis Configuration
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      
      # Next.js Configuration
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
      - HOSTNAME=0.0.0.0
      
      # Supervisor Specific Features
      - NEXT_PUBLIC_ENABLE_SUPERVISOR=true
      - NEXT_PUBLIC_ENHANCED_INTELLIGENCE=true
      - NEXT_PUBLIC_DEFAULT_CHAT_MODE=supervisor
    depends_on:
      - supervisor
      - redis
    volumes:
      # Only mount for development
      - .:/app
      - /app/node_modules
      - /app/.next
    restart: unless-stopped
    networks:
      - cea-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # =====================================================
  # Enhanced Local LLM Service (CPU)
  # =====================================================
  ollama:
    image: ollama/ollama:latest
    profiles: ["dev", "local-llm", "supervisor"]
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_NUM_PARALLEL=2
      - OLLAMA_MAX_LOADED_MODELS=3
    restart: unless-stopped
    networks:
      - cea-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =====================================================
  # Enhanced Local LLM Service (GPU)
  # =====================================================
  ollama-gpu:
    image: ollama/ollama:latest
    profiles: ["gpu", "supervisor-gpu"]
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_NUM_PARALLEL=4
      - OLLAMA_MAX_LOADED_MODELS=5
      - OLLAMA_GPU_LAYERS=-1
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    networks:
      - cea-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =====================================================
  # Enhanced Redis Cache Service
  # =====================================================
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # =====================================================
  # Enhanced Database Migration Service
  # =====================================================
  migrations:
    image: supabase/cli:latest
    profiles: ["migration"]
    volumes:
      - ./supabase:/workspace
      - ./migrations:/migrations
    working_dir: /workspace
    environment:
      - SUPABASE_ACCESS_TOKEN=${SUPABASE_ACCESS_TOKEN}
      - SUPABASE_DB_PASSWORD=${SUPABASE_DB_PASSWORD}
      - SUPABASE_PROJECT_REF=${SUPABASE_PROJECT_REF}
    command: ["supabase", "db", "push"]
    networks:
      - cea-network

  # =====================================================
  # LangGraph Studio (Development Tool)
  # =====================================================
  langgraph-studio:
    image: langchain/langgraph-studio:latest
    profiles: ["dev-studio", "supervisor"]
    ports:
      - "3002:3002"
    environment:
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
      - LANGCHAIN_TRACING_V2=${LANGCHAIN_TRACING_V2:-false}
    volumes:
      - ./backend:/app
      - langgraph_studio_data:/data
    networks:
      - cea-network
    restart: unless-stopped

  # =====================================================
  # Enhanced Monitoring & Observability
  # =====================================================
  prometheus:
    image: prom/prometheus:latest
    profiles: ["monitoring"]
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    restart: unless-stopped
    networks:
      - cea-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    profiles: ["monitoring"]
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - cea-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================================
  # Log Aggregation Service
  # =====================================================
  loki:
    image: grafana/loki:latest
    profiles: ["monitoring"]
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - cea-network

  langgraph-server:
    image: python:3.11-slim
    working_dir: /app
    volumes:
      - ./backendv1:/app/backendv1
      - ./langgraph.json:/app/langgraph.json
    ports:
      - "8123:8123"
    environment:
      - PYTHONPATH=/app
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    command: >
      bash -c "pip install langgraph mcp[cli] langchain_community langchain-openai langchain-anthropic &&
               langgraph dev"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8123/health"]
      interval: 10s
      timeout: 5s
      retries: 3

# =====================================================
# Enhanced Docker Volumes
# =====================================================
volumes:
  ollama_models:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  langgraph_studio_data:
    driver: local
  backend_data:
    driver: local

# =====================================================
# Enhanced Docker Networks
# =====================================================
networks:
  cea-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 